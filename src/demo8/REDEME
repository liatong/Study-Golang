


--------bit  byte word  比特为，比特 字节，字-------
1个字，两个字节，1个字节，8位 

1 word = 2 byte = 16bit 
1 byte = 8 bit 
1 byte，能够表示10进制的数量0～255 
字     word 
字节  byte 
位     bit 
字长是指字的长度

1字节=8位(1 byte = 8bit)
1字=2字节(1 word = 2 byte)  

------ string 和bytes之间的关系----
string是文本(text)的抽象表示。字符串(string)由字符组成，字符也是抽象的实体且与任何二进制表示无关。
当操纵字符串的时候，很多细节是不用了解的。我们可以分割、切片和拼接字符串，在字符串内部进行搜索。但并不在乎内部是如何表示的，也不用在意底层一个字符要花费多少byte。
只有在需要将string编码(encode)成byte的时候，比如：通过网络传输数据；或者需要将byte解码(decode)成string的时候，我们才会关注string和byte的区别。

也就是说，[2]bytes  也就是是一个字，在string当中就是1个string自负。在bytes里面就是2个bytes，也就是16个bit位。
一般在有需要网络传输string的时候，才需要把string转换成为byte。


------ 在go当中[]byte 如何和string进行转换 ---- 
	a := "a"
	A := []byte(a)
	b := "b"
	B := []byte(b)
	fmt.Print(A, "\n")
	fmt.Print(B, "\n")
	[97]
	[98]
	
	
   这里一个字符串，通过ASIIC码进行转换，自然就能够转换成为对应的byte了。这个其实也就是二进制。可以看下如下的表格。
	二进制	    十进制	十六进制	图形
	01100000	96	     60		`
	01100001	97	     61		a
	01100010	98	     62		b
	01100011	99	     63		c
	01100100	100      64		d
	01100101	101	     65		e
	01100110	102      66		f
	
	你看在这里我们就能够很明显的看到了。要进行网络传输都需要把这些都转换成为二进制都比特位，才能够传输出去。
	所以之前有一个问题，就是在一些定义的协议当中，定义了某些长度的比特位协议头。并且这个协议头具备它自己本身的意义。
	那我们要如何来通过这些比特位的头部来识别应该进行什么操作呢？ 
	我的个人看法就是可以获取字节，然后转换成为具体的十进制，或者字符来判断。当然也完全可以转换成为二进制的形式来判断吧。
	
	TIPS：转换成为[]bytes就能够进行网络传输？ 为什么打印出来的是97，而不是010101这样的二进制形式呢？那是因为打印机器为了容易观看，做了一层ASIIC的转换
	方便我们进行查看。而实际上是已经变成了具体的byte位了。

-----------------------------------------






